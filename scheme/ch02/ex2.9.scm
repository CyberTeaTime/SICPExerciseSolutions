#lang scheme 
(require (planet schematics/schemeunit:3))

(define (make-interval a b) (cons a b))
(define (lower-bound x) (car x))
(define (upper-bound x) (cdr x))

(define (width x) (/ (+ (lower-bound x) (upper-bound x)) 2))

(define (add-interval x y)
  (make-interval (+ (lower-bound x) (lower-bound y))
                 (+ (upper-bound x) (upper-bound y))))
(define (sub-interval x y)
  (make-interval (- (lower-bound x) (upper-bound y))
                 (- (upper-bound x) (lower-bound y))))
(define (mul-interval x y)
  (let ((p1 (* (lower-bound x) (lower-bound y)))
        (p2 (* (lower-bound x) (upper-bound y)))
        (p3 (* (upper-bound x) (lower-bound y)))
        (p4 (* (upper-bound x) (upper-bound y))))
    (make-interval (min p1 p2 p3 p4) (max p1 p2 p3 p4))))
(define (div-interval x y)
  (mul-interval x (make-interval (/ 1.0 (upper-bound y)) 
                                 (/ 1.0 (lower-bound y)))))

; (width (add-interval x y))
; = (/ (+ (lower-bound (add-interval x y)) (upper-bound (add-interval x y))) 2)
; = (/ (+ (+ (lower-bound x) (lower-bound y)) (+ (upper-bound x) (upper-bound y))) 2)
; = (/ (+ (lower-bound x) (lower-bound y) (upper-bound x) (upper-bound y)) 2)
; = (/ (+ (lower-bound x) (upper-bound x) (lower-bound y) (upper-bound y)) 2)
; = (+ (/ (+ (lower-bound x) (upper-bound x)) 2) (/ (+ (lower-bound y) (upper-bound y)) 2))
; = (+ (width x) (width y))
                 
; (width (sub-interval x y))
; = (/ (+ (lower-bound (sub-interval x y)) (upper-bound (sub-interval x y))) 2)
; = (/ (+ (- (lower-bound x) (upper-bound y)) (- (upper-bound x) (lower-bound y))) 2)
; = (/ (+ (lower-bound x) (upper-bound x) (- (+ (lower-bound y) (upper-bound y)))) 2)
; = (- (/ (+ (lower-bound x) (upper-bound x)) 2) (/ (+ (lower-bound y) (upper-bound y)) 2))
; = (- (width x) (width y))

(define minus-one-one-interval (make-interval -1.0 1.0))
(define zero-one-interval      (make-interval  0.0 1.0))
(define two-three-interval     (make-interval  2.0 3.0))
(define four-five-interval     (make-interval  4.0 5.0))

(display (width (add-interval minus-one-one-interval zero-one-interval)))(newline)
(display (width (add-interval minus-one-one-interval two-three-interval)))(newline)
(display (width (add-interval two-three-interval four-five-interval)))(newline)

(check-equal? (width (add-interval minus-one-one-interval zero-one-interval)) 
              (+ (width minus-one-one-interval) (width zero-one-interval)))
(check-equal? (width (add-interval minus-one-one-interval two-three-interval)) 
              (+ (width minus-one-one-interval) (width two-three-interval)))
(check-equal? (width (add-interval zero-one-interval two-three-interval)) 
              (+ (width zero-one-interval) (width two-three-interval)))
(check-equal? (width (add-interval two-three-interval four-five-interval)) 
              (+ (width two-three-interval) (width four-five-interval)))

(display (width (sub-interval minus-one-one-interval zero-one-interval)))(newline)
(display (width (sub-interval minus-one-one-interval two-three-interval)))(newline)
(display (width (sub-interval two-three-interval four-five-interval)))(newline)

(check-equal? (width (sub-interval minus-one-one-interval zero-one-interval)) 
              (- (width minus-one-one-interval) (width zero-one-interval)))
(check-equal? (width (sub-interval minus-one-one-interval two-three-interval)) 
              (- (width minus-one-one-interval) (width two-three-interval)))
(check-equal? (width (sub-interval zero-one-interval two-three-interval)) 
              (- (width zero-one-interval) (width two-three-interval)))
(check-equal? (width (sub-interval two-three-interval four-five-interval)) 
              (- (width two-three-interval) (width four-five-interval)))

; (width (mul-interval (x y)))
; = (/ (+ (lower-bound (mul-interval x y)) 
;         (upper-bound (mul-interval x y))) 2)
; = (let ((p1 (* (lower-bound x) (lower-bound y)))
;         (p2 (* (lower-bound x) (upper-bound y)))
;         (p3 (* (upper-bound x) (lower-bound y)))
;         (p4 (* (upper-bound x) (upper-bound y))))
;     (/ (+ (min p1 p2 p3 p4) (max p1 p2 p3 p4)) 2))
; therefore, the width is not linearly dependent on the values of the widths for
; the two intervals. Since (div-interval) is implemented using (mul-interval), 
; the same argument holds.
