#lang scheme 
(require (planet schematics/schemeunit:3))

(define (make-point x y)
  (cons x y))

(define (x-point p)
  (car p))

(define (y-point p)
  (cdr p))
  
(define (make-segment start end)
  (cons start end))
  
(define (start-segment s)
  (car s))

(define (end-segment s)
  (cdr s))

(define (midpoint-segment s)
  (let ((x1 (x-point (start-segment s)))
        (y1 (y-point (start-segment s)))
        (x2 (x-point (end-segment s)))
        (y2 (y-point (end-segment s))))
      (make-point (/ (+ x1 x2) 2) (/ (+ y1 y2) 2))))

(define (print-point p)
  (newline)
  (display "(")
  (display (x-point p))
  (display ",")
  (display (y-point p))
  (display ")"))

(define zero-zero (make-point 0.0 0.0))
(define zero-two  (make-point 0.0 2.0))
(define two-zero  (make-point 2.0 0.0))
(define zero-one  (make-point 0.0 1.0))
(define one-zero  (make-point 1.0 0.0))
(define one-one   (make-point 1.0 1.0))
(define two-two   (make-point 2.0 2.0))
(define m-one-m-one (make-point -1.0 -1.0))
(define m-two-m-two (make-point -2.0 -2.0))

(define (check-equal-point? p expected-p)
  (check-equal? (x-point p) (x-point expected-p))
  (check-equal? (y-point p) (y-point expected-p)))
  
(define zero-zero-zero-zero   (make-segment zero-zero zero-zero))
(define zero-zero-two-two     (make-segment zero-zero two-two))
(define zero-zero-m-one-m-one (make-segment zero-zero m-one-m-one))
(define zero-zero-m-two-m-two (make-segment zero-zero m-two-m-two))
(define zero-zero-two-zero    (make-segment zero-zero two-zero))
(define zero-zero-zero-two    (make-segment zero-zero zero-two))
(define two-two-zero-zero     (make-segment two-two zero-zero))
(define m-two-m-two-zero-zero (make-segment m-two-m-two zero-zero))
(define two-zero-zero-zero    (make-segment two-zero zero-zero))
(define zero-two-zero-zero    (make-segment zero-two zero-zero))
(define m-two-m-two-two-two   (make-segment m-two-m-two two-two))
(define two-two-m-two-m-two   (make-segment two-two m-two-m-two))

(define mid-zero-zero-a (midpoint-segment zero-zero-zero-zero))
(define mid-zero-zero-b (midpoint-segment m-two-m-two-two-two))
(define mid-zero-zero-c (midpoint-segment two-two-m-two-m-two))
(define mid-one-one     (midpoint-segment zero-zero-two-two))
(define mid-one-zero-a  (midpoint-segment zero-zero-two-zero))
(define mid-one-zero-b  (midpoint-segment two-zero-zero-zero))
(define mid-zero-one-a  (midpoint-segment zero-zero-zero-two))
(define mid-zero-one-b  (midpoint-segment zero-two-zero-zero))

(check-equal-point? mid-zero-zero-a zero-zero)
(check-equal-point? mid-zero-zero-b zero-zero)
(check-equal-point? mid-zero-zero-c zero-zero)
(check-equal-point? mid-one-one     one-one)
(check-equal-point? mid-one-zero-a  one-zero)
(check-equal-point? mid-one-zero-b  one-zero)
(check-equal-point? mid-zero-one-a  zero-one)
(check-equal-point? mid-zero-one-b  zero-one)

(print-point mid-zero-zero-a)
(print-point mid-zero-zero-b)
(print-point mid-zero-zero-c)
(print-point mid-one-one)
(print-point mid-one-zero-a)
(print-point mid-one-zero-b)
(print-point mid-zero-one-a)
(print-point mid-zero-one-b)
(newline)
(print-point zero-zero)
(print-point one-zero)
(print-point zero-one)
(print-point two-zero)
(print-point zero-two)
(print-point one-one)
(print-point two-two)
(print-point m-one-m-one)
(print-point m-two-m-two)
(newline)
